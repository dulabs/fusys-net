@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h2>@Model.ViewName</h2>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<form asp-action="@Model.ViewName">
    @:<div class="form-horizontal">
        @:<h4>@Model.ViewDataTypeShortName</h4>
        @:<hr />
        @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
    foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
    {
        if (property.IsPrimaryKey)
        {
    @:<input type="hidden" asp-for="@property.PropertyName" />
            continue;
        }
        
        if (property.Scaffold)
        {
            if (property.IsReadOnly)
            {
                continue;
            }

            if (property.IsForeignKey)
            {
        @:<div class="field">
            @:<label asp-for="@property.PropertyName"></label>
            @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
            @:<span asp-validation-for="@property.PropertyName" class="text-danger" />
        @:</div>
                continue;
            }

            bool isCheckbox = property.TypeName.Equals("System.Boolean");
            if (isCheckbox)
            {
        @:<div class="field">
            @:<div class="ui toggle checkbox">
                @:<input asp-for="@property.PropertyName" />
                @:<label asp-for="@property.PropertyName"></label>
            @:</div>
        @:</div>
            }
            else if (property.IsEnum && !property.IsEnumFlags)
            {
        @:<div class="field">
            @:<label asp-for="@property.PropertyName"></label>
            @:<select asp-for="@property.PropertyName" class="form-control"></select>
            @:<span asp-validation-for="@property.PropertyName" class="text-danger" />
        @:</div>
            }
            else
            {
        @:<div class="field">
            @:<label asp-for="@property.PropertyName"></label>
            @:<input asp-for="@property.PropertyName" class="form-control" />
            @:<span asp-validation-for="@property.PropertyName" class="text-danger" />
        @:</div>
            }
        }
        // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work. 
        else if (property.IsForeignKey)
        {
    @:<input type="hidden" asp-for="@property.PropertyName" />
            continue;
        }
    }
}
          <div class="field">
                <div class="ui buttons">
                    <button type="submit" class="ui positive button">Save</button>
                    <div class="or"></div>
                    <a asp-action="index" class="ui negative button">Back to list</a>
                </div>
          </div>
    </div>
</form>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(PropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }
}
